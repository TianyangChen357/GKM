from gtts import gTTS
from moviepy.editor import *
import os


# Step 1: Convert text to speech using gTTS
def text_to_speech(text, output_audio_file="speech.mp3"):
    tts = gTTS(text)
    tts.save(output_audio_file)
    return output_audio_file


# Step 2: Create a simple video with image and audio
def create_video_with_audio(image_path, audio_path, output_video_file="output_video.mp4"):
    try:
        # Load the image and set its duration to match the audio length
        audio_clip = AudioFileClip(audio_path)
        image_clip = ImageClip(image_path).set_duration(audio_clip.duration)
        
        # Add audio to the video (image + audio)
        video = image_clip.set_audio(audio_clip)
        
        # Export the final video (without preset argument)
        video.write_videofile(output_video_file, fps=24, codec="libx264")

    except Exception as e:
        print(f"Error creating video: {e}")
    finally:
        audio_clip.close()


# Provide the text to be read
text = """
Spatial statistics is a branch of statistics that focuses on analyzing data with a spatial component, helping us understand patterns, relationships, and variations across geographic areas. Itâ€™s widely used in fields like geography, ecology, and urban planning to make informed decisions by analyzing how location impacts phenomena such as population density, resource distribution, or environmental changes. By leveraging tools like spatial autocorrelation and clustering, spatial statistics uncovers hidden insights that wouldn't be visible in non-spatial data analysis.
"""

# Step 3: Generate speech from text
audio_file = text_to_speech(text)

# Step 4: Create a video with a placeholder image of a man
image_file = "man_image.jpg"  # Replace this with the path to your image file

output_video_file = 'output_video_static.mp4'
create_video_with_audio(image_file, audio_file, output_video_file)

# Step 5: Clean up temporary files safely
if os.path.exists(audio_file):
    os.remove(audio_file)

print(f"Video created successfully: {output_video_file}")
